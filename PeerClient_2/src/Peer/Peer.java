
package Peer;

import java.io.IOException;
import static java.lang.Thread.sleep;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import PeerClient.Client ;
import Server.Server ;
import PeerClient.LoginForm ;
import PeerClient.userProfile;

/**
 *
 * @author aayushshivam7
 */
public class Peer extends javax.swing.JFrame {

    private boolean loggedIn = false;          // logged in to central_server 
    private final Server server;
    private final Client client;
    private String username;
    private String password;

    /**
     * Creates new form Peer
     */
    public Peer() {

        initComponents();
        server = new Server(this);
        client = new Client(this);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Connector = new javax.swing.JButton();
        desktopPane = new javax.swing.JDesktopPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("StarkHub");

        Connector.setText("Connect To Server ");
        Connector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane)
            .addGroup(layout.createSequentialGroup()
                .addGap(366, 366, 366)
                .addComponent(Connector, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(412, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Connector)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ConnectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectorActionPerformed
        openLoginWindow();
    }//GEN-LAST:event_ConnectorActionPerformed

    private void alert(String message, String title) {
        JOptionPane.showMessageDialog(null, message, title, JOptionPane.INFORMATION_MESSAGE);
    }

    public void authenticate(String type) throws InterruptedException {
        try {
            boolean done1 = false;
            try {
                done1 = server.authenticate(username, password, type);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
//            System.out.println("gandiya kaha phatti - - 1" + type);
            if (type.equals(Constants.SIGNUP)) {
//                System.out.println("gandiya kaha phatti - - 2");

                sleep(150);
                if (done1 == false) {
                    alert("Sign up failed !!! try again", "");
                }
            }
//            System.out.println("gandiya kaha phatti - - 3");

            boolean done2 = client.authenticate(username, password, Constants.LOGIN);
            System.out.println(done1 + "\n" + done2);
            if (!done1 || !done2) {

                alert("Login Failed !!!! try again ", "");
                openLoginWindow();
                return;
            }
            loggedIn = true;

            alert("Login Successful , u can watch videos now", "Nice work");

            // create server thread
            Thread serverThread = new Thread(server);
            serverThread.start();
            
            client.start() ;          //for constant communication with central server
            this.setContentPane(new userProfile(username,this));
            
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Peer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Peer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Peer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Peer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(() -> {
            new Peer().setVisible(true);
            
        });
        
        /* Create and display the form */

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Connector;
    private javax.swing.JDesktopPane desktopPane;
    // End of variables declaration//GEN-END:variables

    public void setUsername(String text) {
        this.username = text;
    }

    public void setPassword(String password) {
        this.password = password;
        System.out.println(this.password);
    }

    private void openLoginWindow() {
       
        LoginForm loginWindow;
        loginWindow = new LoginForm(this);
        desktopPane.add(loginWindow);
        loginWindow.setVisible(true);
        loginWindow.moveToFront();
        
    }

    public JDesktopPane getDesktopPane() {
        return this.desktopPane ;
    }

    public String getUserName() {
        return this.username ;
    }
    
    Client getClient(){
        return this.client ;
    }
    
}
